# Based on (probably) https://gist.github.com/pksunkara/988716
# Other sources should be attributed in comments.

# Used with git 2.9

[user]
	name = Mateusz Konieczny
	email = matkoniecz@gmail.com
[credential "https://github.com"]
	username = matkoniecz
[credential "https://gitlab.com"]
	username = matkoniecz@gmail.com

[alias]
	# List aliases
	# from https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig
	aliases = config --get-regexp alias

	#############
	a = add
	aa = add -u .
	aaa = add --all
	ai = add -p
	ap = add -p
	#############
	rv = revert
	#############
	b = branch
	ob = checkout -b
	bo = checkout -b
	ba = branch --all #option -a shows both local and remote branches
	bd = branch -d # delete branch
	br = branch -r #Option -r causes the remote-tracking branches to be listed
	nuke = "!git branch -d ${1} && git push origin --delete ${1}"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	# from https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig#
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"


	#http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit

	bl2 = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'

	bl = "!r() { cur=$(git rev-parse --abbrev-ref HEAD); git for-each-ref --sort=-committerdate refs/heads/ --format='%(color:bold yellow)%(refname:short)|%(color:dim white)%(subject)|%(color:dim white)%(authorname)%(color:reset)|%(color:dim green)%(committerdate:relative)' | sed \"s/m${cur}|/m* ${cur}|/\" | column -ts'|'; }; r"
	lb = bl
	merged = branch --merged
	#############
	c = commit -m
	#cal = commit --all -m #Tell the command to automatically stage files that have been modified and deleted, but new files you have not told Git about are not affected.
	ca = commit --amend
	caa = commit --amend --no-edit
	ops = commit --amend --no-edit # from https://medium.com/@porteneuve/30-git-cli-options-you-should-know-about-15423e8771df#.84vinznge
	oops = commit --amend --no-edit # from https://medium.com/@porteneuve/30-git-cli-options-you-should-know-about-15423e8771df#.84vinznge
	cp = cherry-pick
	#############
	d = diff --find-renames
	dc = diff --find-renames --cached
	dw = diff --find-renames --word-diff=color
	dcw = diff --find-renames --cached --word-diff=color
	dl = difftool --dir-diff
	dlc = difftool --cached --dir-diff
	dp = diff --find-renames --patience
	#############
	# --all --prune is to download branch deletions ( https://stackoverflow.com/a/2003515/4130619 - see the end of the asnwer)
	f = fetch --all --prune
	#############
	#fp = format-patch
	#############
	#g = grep -p
	#############
	i = "!git init; git commit --allow-empty -m \"empty initial commit\""
	import = "!git add --all; git commit -m \"initial import of files after creating git repository\""
	#############
	orphan = "!gitk --all --date-order `git reflog | cut -c1-7`"
	#############
	#from https://coderwall.com/p/euwpig/a-better-git-log
	# see [color "decorate"] section for configuration of (auto) parameter for position info
	#
	# https://stackoverflow.com/a/34467298/4130619 has more ideas
	l = log --graph --pretty=format:"'%Cred%h%Creset -%C(auto)%d%C(#cccccc) %s %Cgreen(%cr)%Creset %C(#3b3b3b)%an'" --abbrev-commit --date=relative --decorate --all -n 10
	ll = log --graph --pretty=format:"'%Cred%h%Creset -%C(auto)%d%C(#cccccc) %s %Cgreen(%cr)%Creset %C(#3b3b3b)%an'" --abbrev-commit --date=relative --decorate --all -n 30
	lf = log --graph --pretty=format:"'%Cred%h%Creset -%C(auto)%d%C(#cccccc) %s %Cgreen(%cr)%Creset %C(#6b6b6b)%an'" --abbrev-commit --date=relative --decorate --all
	llf = lf
	ls = log --oneline
	lstd = log --oneline --decorate --graph
	lg = "!gitk --all&"

	#############
	#ls = ls-files
	#lsf = "!git ls-files | grep -i"
	#############
	m = merge
	mum = "!git fetch upstream; git switch master; git merge upstream/master; git push" 
	ma = merge --abort
	#mc = merge --continue
	#ms = merge --skip
	#############
	co = "!echo 'o is my alias for checkout command'"
	o = checkout
	# s is taken by status
	#############
	ps = push --follow-tags
	psf = push -f --follow-tags #-force
	psu = push --set-upstream #-u
	pso = push origin
	#psao = push --all origin
	#psfo = push -f origin
	#psuo = push -u origin
	#psom = push origin master
	#psfom = push -f origin master
	#psuom = push -u origin master
	#############
	pl = pull
	plo = pull origin
	plu = pull upstream
	#plom = pull origin master
	#plpm = pull upstream master
	#############
	#pb = pull --rebase
	#pbo = pull --rebase origin
	#pbp = pull --rebase upstream
	#pbom = pull --rebase origin master
	#pbpm = pull --rebase upstream master
	#############
	rb = rebase
	rba = rebase --abort
	rbc = rebase --continue
	rbi = rebase --interactive
	rbs = rebase --skip
	#############
	re = reset
	#rh = reset HEAD
	reh = reset --hard
	#rem = reset --mixed
	#res = reset --soft
	#rehh = reset --hard HEAD
	#remh = reset --mixed HEAD
	#resh = reset --soft HEAD
	#############
	r = remote
	ra = remote add
	rr = remote rm
	rp = remote prune
	rl = remote --verbose #list remotes with their urls
	remotes = remote --verbose #list remotes with their urls
	rao = remote add origin
	rs = remote show
	so = remote show origin
	rpo = remote prune origin
	#############
	s = status --short --branch
	s-explanation = status shown in short form but still lists branch

	edit = edited
	edits = edited
	edited = "!codium $(git ls-files -o -m --exclude-standard)"
	#from https://stackoverflow.com/questions/3065650/whats-the-simplest-way-to-get-a-list-of-conflicted-files
	war = diff --name-only --diff-filter=U
	conflict = diff --name-only --diff-filter=U
	conflicts = diff --name-only --diff-filter=U
	def = defend
	defence = defend
	defe = defend
	defen = defend
	defend = "!codium $(git diff --name-only --diff-filter=U)"
	#############
	#sa = stash apply
	#sc = stash clear
	#sd = stash drop
	#sl = stash list
	#sp = stash pop
	#ss = stash save
	#sw = stash show
	#############
	t = for-each-ref --format '%(refname) %09 %(taggerdate) %(subject) %(taggeremail)' refs/tags  --sort=taggerdate
	#############
	#assume = update-index --assume-unchanged
	#unassume = update-index --no-assume-unchanged
	#assumed = "!git ls-files -v | grep ^h | cut -c 3-"
	#unassumeall = !git assumed | xargs git update-index --no-assume-unchanged
	#assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
	#############
	#ours = "!f() { git checkout --ours $@ && git add $@; }; f"
	#theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
	#############
	#barebranch = !sh -c 'git symbolic-ref HEAD refs/heads/$1 && git rm --cached -r . && git clean -xfd' -
	#flat = clone --depth 1
	#subpull = !git submodule foreach git pull --tags origin master
	#subrepo = !sh -c 'filter-branch --prune-empty --subdirectory-filter $1 master' -
	#human = name-rev --name-only --refs=refs/heads/*
	#serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git
	#snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
	# from https://stackoverflow.com/questions/3796927/how-to-git-clone-including-submodules/14365374#14365374
	clone-base = clone
	clone = clone-base --recurse-submodules
	#############
	#git-apply - Apply a patch to files and/or to the index
	#ap = apply
	#as = apply --stat
	#ac = apply --check
	#############
	ru = "!rubocop -DES"
	rua = "!rubocop -DES --auto-correct ; git aa ; git dc"
	rur = "!rubocop -DESR"
	rura = "!rubocop -DESR --auto-correct ; git aa ; git dc"
	ruta = "!rubocop --auto-gen-config ; git aa ; git dc"
	rut = "!rubocop --auto-gen-config"

[rerere]
	enabled = true
[color]
	ui = auto
	branch = auto
	interactive = auto
	diff = auto
	status = auto
	showbranch = auto
[color "branch"]
	current = yellow bold
	local = green bold
	remote = cyan bold

# color.ui
#     This variable determines the default value for variables such as color.diff and color.grep that
#     control the use of color per command family. Its scope will expand as more commands learn
#     configuration to set a default for the --color option. Set it to always if you want all output
#     not intended for machine consumption to use color, to true or auto if you want such output to use
#     color when written to the terminal, or to false or never if you prefer git commands not to use
#     color unless enabled explicitly with some other configuration or the --color option.

# color.branch
#     A boolean to enable/disable color in the output of git-branch(1). May be set to always, false (or
#     never) or auto (or true), in which case colors are used only when the output is to a terminal.
#     Defaults to false.

# color.interactive
#     When set to always, always use colors for interactive prompts and displays (such as those used by
#     "git-add --interactive"). When false (or never), never. When set to true or auto, use colors only
#     when the output is to the terminal. Defaults to false.

# color.diff
#     Whether to use ANSI escape sequences to add color to patches. If this is set to always, git-
#     diff(1), git-log(1), and git-show(1) will use color for all patches. If it is set to true or
#     auto, those commands will only use color when output is to the terminal. Defaults to false.

#     This does not affect git-format-patch(1) nor the git-diff-* plumbing commands. Can be overridden
#     on the command line with the --color[=<when>] option.

# color.status
#     A boolean to enable/disable color in the output of git-status(1). May be set to always, false (or
#     never) or auto (or true), in which case colors are used only when the output is to a terminal.
#     Defaults to false.

# color.pager
#     A boolean to enable/disable colored output when the pager is in use (default is true).

# color.showbranch
#     A boolean to enable/disable color in the output of git-show-branch(1). May be set to always,
#     false (or never) or auto (or true), in which case colors are used only when the output is to a
#     terminal. Defaults to false.

# color.branch.<slot>
#     Use customized color for branch coloration.  <slot> is one of current (the current branch), local
#     (a local branch), remote (a remote-tracking branch in refs/remotes/), plain (other refs).

#     The value for these configuration variables is a list of colors (at most two) and attributes (at
#     most one), separated by spaces. The colors accepted are:
#       normal, black, red, green, yellow, blue, magenta, cyan and white;
#     the attributes are:
#       bold, dim, ul, blink and reverse.
#
#     The first color given is the foreground; the second is the background.
#     The position of the attribute, if any, doesn't matter.

# color.decorate.<slot>
#     Use customized color for git log --decorate output.  <slot> is one of branch, remoteBranch, tag,
#     stash or HEAD for local branches, remote-tracking branches, tags, stash and HEAD, respectively.
[color "decorate"]
	branch = yellow
	remoteBranch = yellow
	tag = yellow
	stash = yellow
	HEAD = yellow

# color.diff.<slot>
#     Use customized color for diff colorization.  <slot> specifies which part of the patch to use the
#     specified color, and is one of plain (context text), meta (metainformation), frag (hunk header),
#     func (function in hunk header), old (removed lines), new (added lines), commit (commit headers),
#     or whitespace (highlighting whitespace errors). The values of these variables may be specified as
#     in color.branch.<slot>.
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
	#whitespace = red reverse # an useless distraction

# color.interactive.<slot>
#     Use customized color for git add --interactive output.  <slot> may be prompt, header, help or
#     error, for four distinct types of normal output from interactive commands. The values of these
#     variables may be specified as in color.branch.<slot>.

# color.status.<slot>
#     Use customized color for status colorization.  <slot> is one of header (the header text of the
#     status message), added or updated (files which are added but not committed), changed (files which
#     are changed but not added in the index), untracked (files which are not tracked by git), branch
#     (the current branch), or nobranch (the color the no branch warning is shown in, defaulting to
#     red). The values of these variables may be specified as in color.branch.<slot>.
[color "status"]
	added = green bold
	changed = yellow bold
	untracked = red bold

[log]
#found in https://stackoverflow.com/questions/40675151/what-do-line-colors-in-git-log-graph-mean
	graphColors = "#f1c40f",red,green,yellow,magenta,cyan,white

[diff]
	tool = meld

	# Use better, descriptive initials (c, i, w) instead of a/b.
	# from https://gist.github.com/tdd/470582
	# https://stackoverflow.com/questions/28017249/what-does-diff-mnemonicprefix-do
	# (i)ndex, (w)ork tree, (c)ommit, (o)bject
	mnemonicPrefix = true

	# When using --word-diff, assume --word-diff-regex=.
	# from https://gist.github.com/tdd/470582
	wordRegex = .

[difftool]
	prompt = false
[push]
	default = current
[pull]
	default = current
[credential]
	# helper = cache --timeout=360000 # stores data in plaintext, problematic password input for multiple repository hosts
	# see https://askubuntu.com/a/959662/349903 for how it should be installed
	helper = /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret
[core]
	quotepath = false #properly display UTF filenames
	editor = codium --wait
	excludesfile = ~/.gitignore_global
	pager = less -x1,4 #sets tab width as 3 spaces - from http://stackoverflow.com/questions/10581093/setting-tabwidth-to-4-in-git-show-git-diff


# core.whitespace
#
#     this will cause git to emit complaints like
#	  warning: 1 line adds whitespace errors
#     I kept it enable for long but disabled as this errors are harmless,
#     distracting, nearly noone cares about them and are trivial to
#     automatically remove if anyone cares about them
# 
#     A comma separated list of common whitespace problems to notice. git
#     diff will use color.diff.whitespace to highlight them, and git
#     apply --whitespace=error will consider them as errors. You can
#     prefix - to disable any of them (e.g. -trailing-space):
#
#         blank-at-eol treats trailing whitespaces at the end of the line
#         as an error (enabled by default).
#
#         space-before-tab treats a space character that appears
#         immediately before a tab character in the initial indent part
#         of the line as an error (enabled by default).
#
#         indent-with-non-tab treats a line that is indented with space
#         characters instead of the equivalent tabs as an error (not
#         enabled by default).
#
#         tab-in-indent treats a tab character in the initial indent part
#         of the line as an error (not enabled by default).
#
#         blank-at-eof treats blank lines added at the end of file as an
#         error (enabled by default).
#
#         trailing-space is a short-hand to cover both blank-at-eol and
#         blank-at-eof.
#
#         cr-at-eol treats a carriage-return at the end of line as part
#         of the line terminator, i.e. with it, trailing-space does not
#         trigger if the character before such a carriage-return is not a
#         whitespace (not enabled by default).
#
#         tabwidth=<n> tells how many character positions a tab occupies;
#         this is relevant for indent-with-non-tab and when Git fixes
#         tab-in-indent errors. The default tab width is 8. Allowed
#         values are 1 to 63.
#	whitespace=blank-at-eol,space-before-tab,-indent-with-non-tab,-tab-in-indent,blank-at-eof
#	
	attributesfile = ~/.gitattributes
[status]
	showUntrackedFiles = all # from https://medium.com/@porteneuve/30-git-cli-options-you-should-know-about-15423e8771df#.84vinznge
[fetch]
	# https://stackoverflow.com/questions/6127328/how-can-i-delete-all-git-branches-which-have-been-merged/24558813#24558813
	# comment:
	# git config --global --add fetch.prune true to prune automatically on fetch or pull. – T3rm1 Dec 18 '15 at 14:51
	prune = true
[diff "image"]
	# from http://www.akikoskinen.info/image-diffs-with-git/
	command = ~/.config/compare_images.sh
[pull]
	# https://stackoverflow.com/questions/62653114/how-to-deal-with-this-git-warning-pulling-without-specifying-how-to-reconcile
	rebase = true
[init]
	defaultBranch = master
